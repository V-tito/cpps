module = (_ def _)* ~"$"
def = function / function_import / type_definition

type_definition = "type" _ identifier _ "=" _ type

# function:

function           = pragmas _ "function" _ identifier _
                            lpar _
                            function_arguments _
                            function_retvals _
                            rpar
                            _ multi_exp _
                       "end" _ "function"

pragmas = ("//$" _ pragma _)*
pragma = pragma_name _ ("=" _ pragma_args _ )?
pragma_name = ~"[a-z_][a-z0-9_]*"i
pragma_args = pragma_arg ( _ "," _ pragma_arg)*
pragma_arg = ~"[a-z0-9_]*"i

empty              = ~"\\s*"

function_import    = _ "function" _ identifier _  "[" _ type_list _ function_retvals _ "]" _

function_arguments = args_groups_list / _

function_retvals   = ("returns" _ type_list) / _
type_list          = type (_ "," _ type)*

args_groups_list   = arg_def_group (_ ";" _ arg_def_group)*
arg_def_group      = arg_def_list _ ":" _ type
arg_def_list       = identifier (_ "," _ identifier)*

let                = "let" _ statements _ "in" _ multi_exp _ "end" _ "let"

if                 = "if" _ exp _ "then" _
                        multi_exp _
                        ("elseif" _ exp _ "then" _ multi_exp _)*
                        (_ "else" _ multi_exp )? _
                     "end" _ "if"

exp                = pragmas _ (unary / exp_singular)
unary              = unary_op _ exp_singular
# "+" is not very useful as a unary, but it's usually present in most languages
unary_op           = "-" / "+"

old                = "old" _ identifier

identifier         = ~"[a-z_][a-z0-9_]*"i

number_literal     = number_literal_real / number_literal_int  / literal_boolean
number_literal_int = ("-")? ~"[0-9]+"
number_literal_real= ("-")? ~"[0-9]*\\.[0-9]+"
literal_boolean    = "true" / "false"


exp_singular       =  (lpar _ exp_container _ rpar) / (_ _ exp_container _ _)


exp_container      =  loop / if / let / algebraic / brackets_algebraic / array_init/ record_init / record_field_access / record_f_acc_arr /array_access / call / old / number_literal / identifier

# multiexp surrounded by parentecies
bracketed_m_exp = pragmas _ lpar _ multi_exp _ rpar
# multiexp not surrounded by parentecies
m_exp              = exp (_ "," _ exp)*
multi_exp          = m_exp / bracketed_m_exp

call               = !("function" _) identifier _ lpar _ multi_exp? _ rpar

open_operand       = if / let / loop /  brackets_algebraic / old / array_access / call / identifier / number_literal

br_operand         = lpar _ operand _ rpar
operand            = open_operand / br_operand

algebraic          = (operand) (_ bin_op _ operand)+
brackets_algebraic = lpar _ algebraic _ rpar

lpar               = "("
rpar               = ")"
empty              = ""

_                  = ~"\\s*"

bin_op             = "+" / "-" / "<="/ ">=" / "<" / ">" / "*" / "/" / "^" / "||" / "|" / "&" / "~=" / "="

record_init        = "record" _ "[" _ (identifier _ ":" _ exp _ ";")* _ (identifier _ ":" _ exp) _ "]"

array_init         = (array _)? "[" _ exp (_ "," _ exp)* _ "]"

array              = array_of / array_br
array_br           = "array" _ "[" _ type _ "]"
array_of           = "array" _ "of" _ type
type               = array / std_type / record / identifier

record             = "record" _ "[" _ record_field ( _ ";" _ record_field )* _ "]"
record_field       = identifier _ ":" _ type
record_field_access= record_exp _ "." _ identifier
# helps avoid endless recursion:
record_f_acc_arr   = array_access _ "." _ identifier
record_exp         = if / loop / let / brackets_algebraic / call / old / identifier

array_exp          = if / loop / let / brackets_algebraic / call / old / identifier / record_field_access
array_index        = if / loop / let / algebraic / brackets_algebraic / call / old / identifier / number_literal

array_access       = array_access_sep / array_access_i_list
array_access_sep   = array_exp ( _ "[" _ array_index _ "]" ) +
array_access_i_list= array_exp _ "[" _ array_index _ ("," _ array_index _)* "]"

# loops:

loop               = "for" _ ranges? _ initial? _ body? _ returns? _ "end" _ "for"

ranges             = range _ ("cross" _  range)*
range              = identifier _ "in" _ (range_numeric / exp)
range_numeric      = exp _ "," _ exp

initial            = ("let"/ "initial") _ statements
body               = while_do / do_while / repeat / while_do_while
repeat             = "repeat" _ statements
while_do           = "while" _ exp _ ("do"/ "repeat") _ statements
do_while           = ("do"/ "repeat") _ statements _ "while" _ exp
while_do_while     = "while" _ exp _ ("do" / "repeat") _ statements _ "while" _ exp


returns            = "returns" _ reductions
reductions         = reduction ( _ (","/";") _ reduction )*
reduction          = reduction_type _ "of" _ exp (_ "when" _ exp)?
reduction_type     = "array" / "value" / "sum" / "product"


# statements:

statement          = multi_assignment
statements         = (statement _ )*

multi_assignment   = identifier _ (_ "," _ identifier)* _ ":=" _ multi_exp _ (";" / _)


std_type           = integer_type / real_type / boolean_type
integer_type       = "integer"
real_type          = "real"
boolean_type          = "boolean"
